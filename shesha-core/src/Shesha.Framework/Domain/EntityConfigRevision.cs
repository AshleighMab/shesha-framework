using Shesha.Domain.Attributes;
using Shesha.Domain.Enums;
using Shesha.DynamicEntities.Dtos;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Shesha.Domain
{
    /// <summary>
    /// Entity configuration revision
    /// </summary>
    [JoinedProperty("entity_config_revisions", Schema = "frwk")]
    [SnakeCaseNaming]
    [DiscriminatorValue(EntityConfig.ItemTypeName)]
    public class EntityConfigRevision : ConfigurationItemRevision
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public EntityConfigRevision()
        {
            // set to user-defined by default, `ApplicationCode` is used in the bootstrapper only
            Source = MetadataSourceType.UserDefined;

            EntityConfigType = EntityConfigTypes.Class;
        }

        [MaxLength(100)]
        public virtual string? TypeShortAlias { get; set; }

        [MaxLength(255)]
        public virtual string? TableName { get; set; }

        [MaxLength(500)]
        public virtual string ClassName { get; set; }
        [MaxLength(500)]
        public virtual string? Namespace { get; set; }
        [MaxLength(255)]
        public virtual string? DiscriminatorValue { get; set; }

        /// <summary>
        /// User-friendly entity name
        /// </summary>
        [EntityDisplayName]
        [MaxLength(255)]
        public virtual string? FriendlyName { get; set; }

        /// <summary>
        /// MD5 hash of the hardcoded properties, is used for performance optimization of the bootstrapper
        /// </summary>
        [MaxLength(40)]
        [Column("properties_md5")]
        public virtual string? HardcodedPropertiesMD5 { get; set; }

        /// <summary>
        /// View configurations
        /// </summary>
        [SaveAsJson]
        public virtual List<EntityViewConfigurationDto> ViewConfigurations { get; set; } = new List<EntityViewConfigurationDto>();

        /// <summary>
        /// If true, indicates that application services should be generated by the application automatically
        /// </summary>
        public virtual bool GenerateAppService { get; set; }

        [NotMapped]
        public virtual string FullClassName => $"{Namespace}.{ClassName}";

        /// <summary>
        /// Source of the entity (code/user)
        /// </summary>
        public virtual MetadataSourceType? Source { get; set; }

        public virtual EntityConfigTypes? EntityConfigType { get; set; }

        /// <summary>
        /// Code identifier that can be used in the client-side code to reference current module
        /// </summary>
        [MaxLength(200)]
        public virtual string? Accessor { get; set; }
    }
}
